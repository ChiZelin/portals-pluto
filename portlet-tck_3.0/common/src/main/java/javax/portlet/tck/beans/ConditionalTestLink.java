/*  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

/**
 * This bean encapsulates a single test result. When converted to a string or 
 * written to a writer, it generates HTML markup containing elements and IDs
 * that can be read by the TCK test driver. 
 * 
 * The TCK test driver works by accessing the page containing the test portlet,
 * clicking a link for the test if one is present, and reading the test output.
 * 
 * The test case is identified by a unique name string that contains no blanks. 
 * The test case name is used to generate ID's for the HTML result elements.
 * The following IDs are generated by this bean:
 * 
 * (TestCaseName)-success     - indicates general test case success or failure
 * (TestCaseName)-detail      - a detailed message about the test     
 * 
 */
package javax.portlet.tck.beans;

import java.io.IOException;
import java.io.Writer;

import javax.portlet.BaseURL;
import javax.portlet.PortletRequest;
import javax.portlet.PortletURL;

/**
 * Formats a link to be clicked as setup for a test case. 
 * 
 * The purpose of this class is to enable a scenario where a portlet displays 
 * multiple test case links. When a link is clicked, The test should be performed
 * and the result displayed. Each link is indeppendent of the other links on
 * the page.
 * 
 * Implementation of the conditional behavior uses a parameter 
 * set on the URL to decide whether the link is to be rendered. If the parameter
 * is not set, the parameter is set on the URL and the link is rendered.
 * 
 * The test driver will look for execution links for a test case and click 
 * those before clicking the actual test case links.
 * 
 * @author nick
 */
public class ConditionalTestLink extends TestLink {
   
   boolean clicked = false;

   /**
    * Creates a test link initialized according to the parameters. 
    * 
    * First tests if the the test case name is set as parameter. If so, the TC is 
    * marked as "clicked" and the link will not be rendered conditionally. The link
    * can still be rendered sing superclass methods.
    * 
    * @param tcName     test case name
    * @param url        url for the test case
    */
   public ConditionalTestLink(PortletRequest req, String tcName, PortletURL purl) {
      super(tcName, purl);
      String val = req.getParameter(tcName);
      clicked = (val != null);
   }
   
   /**
    * @return        true,  if the link has been clicked
    */
   public boolean isClicked() {
      return clicked;
   }
   
   /**
    * Sets parameter on URL and writes the link to the output stream if the link 
    * has not yet been clicked. Returns true if the link was written.
    *  
    * @param writer
    * @return              true, if the link was written to the output stream
    * @throws IOException
    */
   public boolean writeIfNotClicked(Writer writer) throws IOException {
      if (!clicked) {
         this.purl.setParameter(tcName, "1");
         writeTo(writer);
      }
      return !clicked;
   }
   
   /* (non-Javadoc)
    * @see javax.portlet.tck.beans.TestLink#writeTo(java.io.Writer)
    */
   @Override
   public void writeTo(Writer writer) throws IOException {
      this.purl.setParameter(tcName, "1");
      super.writeTo(writer);
   }
   
   /* (non-Javadoc)
    * @see javax.portlet.tck.beans.TestLink#toString()
    */
   @Override
   public String toString() {
      this.purl.setParameter(tcName, "1");
      return super.toString();
   }
}
